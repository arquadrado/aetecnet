{"version":3,"sources":["multiply.js","admin.js"],"names":[],"mappingsfile":"admin.js","sourcesContent":["function log(item) {\n    console.log(item);\n}\n\n(function() {\n\n    var pluginName = 'multiplier';\n\n    function Plugin(container, options) {\n        this.container = container;\n        this.$container = $(container);\n        this.options = $.extend({}, $.fn[pluginName].defaults, options);\n        this.init();\n    }\n\n    Plugin.prototype = {\n\n        grouped: false,\n        positions: [],\n        init: function() {\n\n            var multiplier = this,\n                options = this.options,\n                $container = this.$container;\n\n            if (options.allowGroups) {\n\n                multiplier.update();\n\n                $container.sortable({\n                    handle: '.group-handle',\n                    items: '.locked',\n                    connectWith: '.hotbox',\n                    helper: 'clone',\n                    placeholder: 'multiply-placeholder',\n                    axis: 'y',\n                    start: function(event, ui) {\n\n                        var childrenCount = $(ui.item).children().length;\n                        var multiplyGroupHeight = parseInt($(ui.item).find('.multiply-group').css('height').replace(/[^-\\d\\.]/g, ''));\n                        var multiplyRowHeight = parseInt($(ui.item).find('.multiply').css('height').replace(/[^-\\d\\.]/g, ''));\n                        var multiplyPlaceholderHeight = (multiplyGroupHeight + (multiplyRowHeight * (childrenCount - 1)));\n\n                        $('.multiply-placeholder').css('height', multiplyPlaceholderHeight +'px' );\n                        $('.hotbox').addClass('active');\n\n                    },\n                    stop: function() {\n                        $('.hotbox').removeClass('active');\n                        $('.info').children().removeClass('active');\n                    },\n                    update: function() {\n                        multiplier.update();\n                    }\n                });\n\n                $('.hotbox').sortable({\n\n                    over: function(event, ui) {\n                        var param = ui.item.hasClass('multiply') ? ['hot-row', 'success'] : ['hot-group', 'danger'];\n                        $(this).addClass('alert-' + param[1]);\n                        $container.addClass(param[0]);\n                        $(this).find('.multiply-placeholder').addClass('in-box');\n\n                    },\n                    out: function(event, ui) {\n                        var param = ui.item.hasClass('multiply') ? ['hot-row', 'success'] : ['hot-group', 'danger'];\n                        $(this).removeClass('alert-' + param[1]);\n                        $container.removeClass(param[0]);\n                        $(this).find('.multiply-placeholder').removeClass('in-box');\n\n                    },\n                    receive: function(event, ui) {\n                        var param = ui.item.hasClass('multiply') ? 'hot-row' : 'hot-group';\n\n                        $container.removeClass(param);\n\n                        if (ui.item.hasClass('multiply')) {\n                            options.onCreatingGroup();\n                            $container\n                                .append($('<div class=\"locked\"></div>').append(options.groupElement).append(ui.item));\n\n                        } else {\n\n                            if(!$container.children().length > 0){\n                                log('entered');\n                                log($container);\n                                $container.append(ui.item);\n\n                            } else {\n                                options.onDeletingGroup();\n                                ui.item.remove();\n                            }\n                        }\n                        multiplier.update();\n                    }\n                });\n\n            } else {\n\n                multiplier.update();\n\n                $container.sortable({\n                    axis: 'y',\n                    update: function() {\n                        multiplier.update();\n                    }\n                });\n            }\n\n            $container.on('click', '.add-item', function(e) {\n                multiplier._addRow(e);\n            });\n\n            $container.on('click', '.remove-item', function() {\n                multiplier._removeRow($(this));\n            });\n\n        },\n        destroy: function() {\n\n            this.$container.sortable('destroy');\n            this.$container.children().each(function(i, elem){\n                if($(elem).hasClass('ui-sortable')){\n                    $(elem).sortable('destroy');\n                }\n            });\n\n            this.$container.unbind('click');\n\n        },\n        update: function() {\n\n            var multiplier = this,\n                options = this.options;\n\n            options.onUpdate();\n\n            if (options.allowGroups) {\n\n                multiplier._updateGroups();\n\n                $('.ungrouped').sortable({\n                    items: '.multiply',\n                    connectWith: '.locked, .hotbox',\n                    axis: 'y',\n                    start: function(event, ui) {\n                        options.onMove();\n                        $('.hotbox').addClass('active');\n\n                        var param = ui.item.hasClass('multiply') ? '.row-marker' : '.group-marker';\n\n                        $(param).addClass('active');\n\n                        if (ui.item.hasClass('multiply-group')) {\n                            ui.placeholder.addClass('for-group');\n                        }\n                    },\n                    stop: function() {\n                        $('.hotbox').removeClass('active');\n                        $('.info').children().removeClass('active');\n                    },\n                    update: function() {\n                        multiplier.update();\n                    }\n                });\n\n                $('.locked').sortable({\n                    handle: '.item-handle',\n                    items: '.multiply, .multiply-group',\n                    connectWith: '.ungrouped, .locked, .hotbox',\n                    axis: 'y',\n                    start: function(event, ui) {\n                        options.onMove();\n                        $('.hotbox').addClass('active');\n\n                        var param = ui.item.hasClass('multiply') ? '.row-marker' : '.group-marker';\n\n                        $(param).addClass('active');\n\n                        if (ui.item.hasClass('multiply-group')) {\n                            ui.placeholder.addClass('for-group');\n                        }\n                    },\n                    stop: function() {\n                        $('.hotbox').removeClass('active');\n                        $('.info').children().removeClass('active');\n                    },\n                    update: function() {\n                        multiplier.update();\n                    }\n                });\n\n                var name = this.$container.data('name'),\n                    $form = this.$container.closest('form'),\n                    input = name + '_group_positions',\n                    $input = $form.find('input[name=\"' + input + '\"]'),\n                    value = this.positions.join(',');\n\n                if ($input.length > 0) {\n                    $input.val(value);\n                } else {\n                    $form.append('<input type=\"hidden\" name=\"' + input + '\" value=\"' + value + '\"/>');\n                }\n\n            } else {\n                multiplier._updateRowButtons();\n            }\n\n            this._updateRows();\n        },\n        _updateRowButtons: function() {\n\n            if (this.options.allowGroups) {\n                this.$container.children().each(function(index, item) {\n                    var $group = $(item).children(),\n                        $add_buttons = $('.add-item', $group);\n\n                    $add_buttons.prop('disabled', true).hide();\n                    $add_buttons.last().prop('disabled', false).show();\n                });\n            } else {\n                var $add_buttons = $('.add-item', this.$container);\n\n                $add_buttons.prop('disabled', true).hide();\n                $add_buttons.last().prop('disabled', false).show();\n            }\n        },\n        _groupWrap: function() {\n\n            if (!this.grouped) {\n                $first = this.$container.children().first();\n                if ($first.hasClass('multiply')) {\n                    $first.nextUntil('.multiply-group').addBack().wrapAll('<div class=\"ungrouped\"></div>');\n                }\n\n                this.$container.children().each(function(index, item) {\n                    if ($(item).hasClass('multiply-group')) {\n                        $(item).nextUntil('.multiply-group').addBack().wrapAll('<div class=\"locked\"></div>');\n                    }\n                });\n\n                this.grouped = true;\n            }\n        },\n        _groupUnwrap: function() {\n\n            var $container = this.$container;\n\n            if (this.grouped) {\n                $container.children().each(function(index, item) {\n                    $(item).children().each(function(i, elem) {\n                        $container.append($(elem));\n\n                    });\n                    $(item).remove();\n                });\n                this.grouped = false;\n            }\n\n        },\n        _updateGroups: function() {\n\n            var $container = this.$container;\n\n            var positions = this.positions;\n\n            positions = [];\n\n            this._groupUnwrap();\n\n\n            $container.children().each(function(index, item) {\n                if ($(item).hasClass('multiply-group')) {\n                    positions.push($(item).index());\n                }\n\n            });\n\n            this.positions = positions;\n\n            this._groupWrap();\n\n            $container.children().each(function(index, item) {\n                var $group = $(item).children(),\n                    $add_buttons = $('.add-item', $group);\n\n                $add_buttons.prop('disabled', true).hide();\n                $add_buttons.last().prop('disabled', false).show();\n            });\n        },\n        _addRow: function(e) {\n\n            $('.with-tooltip').tooltip('destroy');\n            var $source = $(e.target).closest('.multiply');\n            var $clone = $source.clone();\n            $clone.find('.to-reset').find('select, input, textarea').val('').prop('checked', false);\n            $source.after($clone);\n            $('.with-tooltip').tooltip();\n\n\n\n\n            this.update();\n        },\n        _removeRow: function($button) {\n\n            var multiplier = this;\n            var $items = $button.closest('.multiply-container').find('.multiply');\n            if (!$button.prop('disabled') && $items.length > 1) {\n                $button.closest('.multiply').fadeOut('fast', function() {\n                    $(this).remove();\n                    multiplier.update();\n                });\n            }\n        },\n        _updateRows: function() {\n\n            var multiplier = this;\n            var $container = this.$container;\n\n            var rows = $container.find('.multiply');\n\n            rows.each(function(i, elem) {\n\n                var $inputFields = $(elem).find('input');\n                $inputFields.each(function(index, element) {\n\n                    var elemArray = $(element).attr('name');\n\n                    var regex = /\\d+([^\\[\\d+])(\\[?([^\\d+])+\\]?)?$/;\n                    var regexSubs = i + ']$2';\n\n                    $(element).attr('name', elemArray.replace(regex, regexSubs))\n                        .attr('id', elemArray.replace(regex, regexSubs));\n\n                });\n\n            });\n\n        }\n\n    };\n\n    $.fn[pluginName] = function(options) {\n        var args = arguments;\n\n        if (options === undefined || typeof options === 'object') {\n            return this.each(function() {\n                if (!$.data(this, 'plugin_' + pluginName)) {\n                    $.data(this, 'plugin_' + pluginName, new Plugin(this, options));\n                }\n            });\n        } else if (typeof options === 'string' && options[0] !== '_' && options !== 'init') {\n            if (Array.prototype.slice.call(args, 1).length === 0 && $.inArray(options, $.fn[pluginName].getters) !== -1) {\n                var instance = $.data(this[0], 'plugin_' + pluginName);\n                return instance[options].apply(instance, Array.prototype.slice.call(args, 1));\n            } else {\n                return this.each(function() {\n                    var instance = $.data(this, 'plugin_' + pluginName);\n                    if (instance instanceof Plugin && typeof instance[options] === 'function') {\n                        instance[options].apply(instance, Array.prototype.slice.call(args, 1));\n                    }\n                });\n            }\n        }\n    };\n\n    var group = '<div class=\"row multiply-group\"><div class=\"col-sm-1 col\"><div class=\"reorder-handle item-handle action-icon\"><span class=\"glyphicon glyphicon-menu-hamburger\"></span></div></div><div class=\"col-sm-2 col\"><input placeholder=\"Nome do grupo\" class=\"lead group-title\" type=\"text\" name=\"\" value=\"\"/></div><div class=\"col-sm-8 col\"><div class=\"line\"></div></div><div class=\"col-sm-1 col\"><div class=\"group-handle action-icon\"><span class=\"glyphicon glyphicon-list-alt\"></span></div></div></div>';\n\n    $.fn[pluginName].defaults = {\n        allowGroups: false,\n        groupElement: group,\n        onMove: function(){\n            //log('moving');\n        },\n        onDrop: function(){\n            //log('dropping');\n        },\n        onCreatingGroup: function(){\n            if(this.allowGroups){\n                //log('creating group');\n            }\n        },\n        onDeletingGroup: function(){\n            if(this.allowGroups){\n                //log('deleting group');\n            }\n        },\n        onUpdate: function(){\n            //log('updating');\n        }\n    };\n\n\n})();","function log(item){\n\tconsole.log(item);\n}\n\n$(document).ready(function(){\n\n    //handling images\n    var $images = $('.images input');\n    var $deleteButton = $('.delete-btn');\n    var imagesToDelete = [];\n\n    $deleteButton.on('click', function(){\n    \tvar img = $(this).parent().find('img').attr('id');\n\t    $('.images').append('<input type=\"hidden\" name=\"imagesToDelete[]\" value=\"' + img + '\" />');\n\t    $(this).parent().remove();\n    });\n\n    //member experiences\n    var $addExperienceBtn = $('.add-experience');\n    var $delExperienceBtn = $('.remove-experience');\n    var $experiencesContainer = $('.experiences');\n\n    $addExperienceBtn.on('click', function(){\n        var $experience = $('.experience');\n        var $experienceCount = $experience.length;\n        var $newExperience = $('<div class=\"row experience\"><div class=\"col-xs-2\"><input name=\"experiences[' + $experienceCount + '][start]\" value=\"\"></div><div class=\"col-xs-2\"><input name=\"experiences[' + $experienceCount + '][end]\" value=\"\"></div><div class=\"col-xs-3\"><input name=\"experiences[' + $experienceCount + '][role]\" value=\"\"></div><div class=\"col-xs-3\"><input name=\"experiences[' + $experienceCount + '][company]\" value=\"\"></div><div class=\"col-xs-2 remove-experience\">x</div></div>');\n\n        $newExperience.appendTo($experiencesContainer);\n    });\n\n    $('.remove-experience').on('click', function(index, item){\n        log($('.remove-experience').length);\n        //$experienceToDel = $('.experience-id');\n        //$experiencesContainer.append('<input type=\"hidden\" name=\"experiencesToDelete[]\" value=\"' + $experienceToDel.val() + '\" />')\n        //$(this).parent().remove();\n    });\n\n\n});"],"sourceRoot":"/source/"}